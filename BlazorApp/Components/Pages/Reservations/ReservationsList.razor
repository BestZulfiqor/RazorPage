@page "/reservations"
@using Domain.DTOs.Reservations
@using Domain.Responses
@using Infrastructure.Interfaces
@inject NavigationManager Navigation
@inject IReservationService ReservationService
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer

<h3>Reservations</h3>
<div class="d-flex justify-content-end">
    <button class="btn btn-primary mb-4" style="background-color: #4A3AFF" @onclick="NavigateToCreate">
        + Add new
    </button>
</div>

<div class="row g-4">
    @foreach (var reservation in reservations)
    {
        <div class="col-md-4 col-lg-3">
            <div class="card h-100 border-0 shadow-sm rounded-3">
                <div class="card-header bg-primary bg-opacity-10 py-3 border-0">
                    <h5 class="card-title mb-0 text-center fw-semibold text-primary">Reservation #@reservation.Id</h5>
                </div>
                <div class="card-body pt-0">
                    <div class="d-flex flex-column gap-2">
                        <div class="d-flex align-items-center">
                            <div>
                                <p class="text-muted">Dates</p>
                                <p class="mb-0 fw-medium">@reservation.ReservationDateStart.ToString("yy-MM-dd") - @reservation.ReservationDateEnd.ToString("yy-MM-dd")</p>
                            </div>
                        </div>
                        
                        <div class="d-flex align-items-center">
                            <div>
                                <p class="text-muted">Time</p>
                                <p class="mb-0 fw-medium">@reservation.ReservationDateStart.ToString("hh:mm") - @reservation.ReservationDateEnd.ToString("hh:mm tt")</p>
                            </div>
                        </div>
                        
                        <div class="d-flex align-items-center">
                            <div>
                                <p class="text-muted">Customer</p>
                                <p class="mb-0 fw-medium">ID: @reservation.CustomerId</p>
                            </div>
                        </div>
                        
                        <div class="d-flex align-items-center">
                            <div>
                                <p class="text-muted">Table</p>
                                <p class="mb-0 fw-medium">#@reservation.TableId</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-transparent border-0 pt-0 pb-3">
                    <div class="d-flex justify-content-center gap-2">
                        <button @onclick="@(() => NavigateToEdit(reservation.Id))" class="btn btn-sm btn-primary">
                            Edit
                        </button>
                        <button @onclick="@(() => ShowDeleteConfirm(reservation.Id))" class="btn btn-danger btn-sm">
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (showDeleteConfirm)
{
    <div class="modal" style="display:block; background:rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Подтверждение удаления</h5>
                </div>
                <div class="modal-body">
                    <p>Вы уверены, что хотите удалить этот бронь?</p>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                </div>
                <div class="modal-footer">
                    <button @onclick="CancelDelete" class="btn btn-secondary">Отмена</button>
                    <button @onclick="ConfirmDelete" class="btn btn-danger">Удалить</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<GetReservationDto> reservations = new();
    private string errorMessage = string.Empty;
    private bool showDeleteConfirm = false;
    private int reservationIdToDelete;
    private HttpClient httpClient;

    protected override async Task OnInitializedAsync()
    {
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7290/");

        try
        {
            var response = await httpClient.GetAsync("api/reservation");
            if (response.IsSuccessStatusCode)
            {
                var apiResponse = await response.Content.ReadFromJsonAsync<Response<List<GetReservationDto>>>();
                if (apiResponse != null && apiResponse.IsSuccess)
                {
                    reservations = apiResponse.Data!;
                }
                else
                {
                    errorMessage = apiResponse?.Message ?? "Ошибка получения данных";
                }
            }
            else
            {
                errorMessage = "Ошибка при получении списка бронирований";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = "Исключение при получении бронирований";
        }
    }

    void NavigateToCreate()
    {
        Navigation.NavigateTo("/reservations/create");
    }

    void NavigateToEdit(int id)
    {
        Navigation.NavigateTo($"/reservations/edit/{id}");
    }

    private void ShowDeleteConfirm(int id)
    {
        reservationIdToDelete = id;
        showDeleteConfirm = true;
        errorMessage = string.Empty;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/reservation/{reservationIdToDelete}");
            if (response.IsSuccessStatusCode)
            {
                var apiResponse = await response.Content.ReadFromJsonAsync<Response<bool>>();
                if (apiResponse != null && apiResponse.IsSuccess)
                {
                    showDeleteConfirm = false;
                    await OnInitializedAsync();
                }
                else
                {
                    errorMessage = apiResponse?.Message ?? "Ошибка при удалении";
                }
            }
            else
            {
                errorMessage = "Ошибка HTTP при удалении";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = "Исключение при удалении";
        }
    }
}
