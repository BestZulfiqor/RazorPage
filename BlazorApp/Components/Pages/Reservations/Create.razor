@page "/reservations/create"
@using Domain.DTOs.Reservations
@using Domain.Responses
@using Infrastructure.Data
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer

<h3 class="mb-4">Create New Reservation</h3>

<div class="card shadow rounded-4 p-4" style="max-width: 500px;">
    <EditForm FormName="CreateReservation" Model="reservation" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="mb-3">
            <label class="form-label">Customer id</label>
            <InputNumber class="form-control" @bind-Value="reservation.CustomerId"/>
        </div>

        <div class="mb-3">
            <label class="form-label">Table id</label>
            <InputNumber class="form-control" @bind-Value="reservation.TableId"/>
        </div>

        <div class="mb-3">
            <label class="form-label">Reservation start date</label>
            <InputDate Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="reservation.ReservationDateStart"
                       TValue="DateTimeOffset"/>
        </div>
        
        <div class="mb-3">
            <label class="form-label">Reservation end date</label>
            <InputDate Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="reservation.ReservationDateEnd"
                       TValue="DateTimeOffset"/>
        </div>

        <div class="d-flex justify-content-between">
            <div>
                <button type="submit" class="btn btn-primary mb-4" style="background-color: #4A3AFF">
                    + Add new
                </button>
            </div>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private CreateReservationDto reservation = new();
    private string errorMessage;
    private HttpClient httpClient = null!;

    protected override void OnInitialized()
    {
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7290/");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            reservation.ReservationDateStart = reservation.ReservationDateStart.ToUniversalTime();
            reservation.ReservationDateEnd = reservation.ReservationDateEnd.ToUniversalTime();

            var response = await httpClient.PostAsJsonAsync("api/reservation", reservation);

            if (!response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Ошибка при создании бронирования. Код ошибки: {response.StatusCode}. Ответ: {responseContent}";
                return;
            }

            var apiResponse = await response.Content.ReadFromJsonAsync<Response<GetReservationDto>>();
            if (apiResponse != null && apiResponse.IsSuccess)
            {
                Navigation.NavigateTo("/reservations");
            }
            else
            {
                errorMessage = apiResponse?.Message ?? "Неизвестная ошибка.";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = "Ошибка при обработке запроса. Попробуйте снова.";
        }
    }
}
